{"version":3,"sources":["Figure.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Figure","props","className","style","width","src","source","hash","Session","state","phaseIndex","stepIndex","lastAdvancedAt","secondsElapsed","secondsRemaining","tick","phase","Date","getTime","duration","setState","setTimeout","advanceTimerId","advance","times","clearInterval","kickstart","this","message","stepIndicator","String","timeLeft","onClick","plan","name","lp","n","slice","floor","Math","React","Component","simplePlan","unsplashUrl","path","dims","Collections","mine","tia","moi","Sources","term","id","options","value","label","SessionManager","started","sourceOption","onSourceChange","selectedSourceOption","sourceUri","onChange","theme","borderRadius","colors","neutral0","neutral50","neutral60","neutral70","neutral80","neutral90","primary","primary25","classDuration","map","reduce","d","d2","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5868f38d.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\ntype FigureProps = { source: string, hash: string }\r\nconst Figure: React.FC<FigureProps> = (props: FigureProps) => {\r\n  return (\r\n    <div className=\"Figure\">\r\n      <img\r\n        style={{width: '100vw'}}\r\n        src={`${props.source}?${props.hash}`}\r\n        />\r\n    </div>\r\n  )\r\n}\r\n\r\ntype Phase = { name: string, duration: number, times: number }\r\nexport type Plan = Phase[]\r\n\r\ntype SessionProps = {\r\n  plan: Plan,\r\n  source: string\r\n}\r\n\r\ntype SessionState = {\r\n  phaseIndex: number,\r\n  stepIndex: number,\r\n  lastAdvancedAt: number,\r\n  secondsElapsed: number,\r\n  secondsRemaining: number,\r\n}\r\n\r\nexport class Session extends React.Component<SessionProps, SessionState> {\r\n  state: SessionState = {\r\n    phaseIndex: 0,\r\n    stepIndex: 0,\r\n    lastAdvancedAt: -1,\r\n    secondsElapsed: -1,\r\n    secondsRemaining: -1,\r\n  }\r\n\r\n  tick = () => {\r\n    if (this.phase) {\r\n      let now = new Date().getTime();\r\n      let secondsElapsed = (now - this.state.lastAdvancedAt) / 1000;\r\n      let secondsRemaining = this.phase.duration - secondsElapsed\r\n      this.setState({ secondsRemaining, secondsElapsed }, () => {\r\n        setTimeout(this.tick, 200)\r\n      })\r\n    }\r\n  }\r\n\r\n  advanceTimerId: any = null\r\n  advance = () => {\r\n    let lastAdvancedAt = new Date().getTime();\r\n    let { times } = this.phase\r\n    let { stepIndex, phaseIndex } = this.state\r\n    stepIndex = stepIndex + 1\r\n    if (stepIndex >= times) {\r\n      phaseIndex = phaseIndex + 1\r\n      stepIndex = 1\r\n    }\r\n    this.setState({\r\n      stepIndex,\r\n      phaseIndex,\r\n      lastAdvancedAt,\r\n    }, () => {\r\n      if (this.phase) {\r\n        let { duration } = this.phase;\r\n        clearInterval(this.advanceTimerId)\r\n        this.advanceTimerId = setTimeout(this.advance, duration * 1000)\r\n      }\r\n    })\r\n  }\r\n\r\n  kickstart = () => {\r\n    this.setState({ stepIndex: 0, phaseIndex: 0 }, this.advance)\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.advance();\r\n    this.tick();\r\n  }\r\n\r\n  get phase(): Phase { return this.props.plan[this.state.phaseIndex] }\r\n\r\n  get message(): string {\r\n    return this.phase ? this.phase.name : \"Congrats, you've completed the class!\"\r\n  }\r\n\r\n  get stepIndicator(): string {\r\n    return `(${this.state.stepIndex} / ${this.phase ? this.phase.times : '?'})`;\r\n  }\r\n\r\n  get timeLeft(): string {\r\n    let { secondsRemaining } = this.state; \r\n    if (secondsRemaining > 0) {\r\n      const lp = (n: any) => (\"00\" + String(n)).slice(-2)\r\n      let { floor } = Math;\r\n      return `${lp(floor(secondsRemaining / 60))}:${lp(floor(secondsRemaining % 60))}`\r\n    } else { return '--'}\r\n  }\r\n\r\n  render() {\r\n    if (this.phase) {\r\n    return <div className=\"Session\">\r\n      <p>\r\n        <b>{this.message}</b>\r\n        <br/>\r\n        <small>{this.stepIndicator}</small>\r\n      </p>\r\n      <Figure\r\n        source={this.props.source}\r\n        hash={String(this.state.lastAdvancedAt)}\r\n      />\r\n      <small>{this.timeLeft}</small>\r\n      <p>\r\n        {this.state.secondsElapsed > 3 ? <button onClick={this.advance}>skip</button> : ''}\r\n      </p>\r\n    </div>\r\n    } else {\r\n      return <><p>{this.message}</p>\r\n        <button onClick={this.kickstart}>again!</button>\r\n        </>\r\n    }\r\n  }\r\n}","import React from 'react';\nimport Select, { ValueType, OptionTypeBase } from 'react-select';\nimport './App.css';\nimport { Session, Plan } from './Figure';\n\nconst simplePlan: Plan = [\n  { name: 'Warm-up I', duration: 30, times: 10 },\n  { name: 'Warm-up II', duration: 60, times: 5 },\n  { name: 'Study I', duration: 60 * 5, times: 2 },\n  // { name: 'Study II', duration: 60 * 5, times: 2 },\n  { name: 'Long Study I', duration: 60 * 10, times: 1 },\n];\n\n\nconst unsplashUrl = (path: string) => `https://source.unsplash.com/${path}`\n\nconst dims = '1920x1080'\nconst Collections: { [key: string]: number } = { \n  mine: 265330,\n  tia: 155450,\n  moi: 2349880,\n}\n\nconst Sources = {\n  random: unsplashUrl(`random/${dims}?person`),\n  search: (term: string) => unsplashUrl(`${dims}/?${term}`),\n  collection: (id: number) => unsplashUrl(`collection/${id}/${dims}`),\n}\n\ntype SourceKind = 'mine' | 'tia' | 'model' | 'random' | 'men' | 'women' | 'moi' | 'nude'\nlet options = [\n  { value: 'mine', label: 'My Favorite Figures' },\n  { value: 'tia', label: \"Tia's Collection\" },\n  { value: 'moi', label: \"'Humans' Collection\" },\n  { value: 'men', label: \"Men\" },\n  { value: 'women', label: \"Women\" },\n  { value: 'model', label: \"Models\" },\n  { value: 'random', label: \"People (Random)\" },\n  { value: 'nude', label: \"Pose\" },\n]\n\ntype ManagerState = {\n  started: boolean\n  source: SourceKind\n  plan: Plan\n  sourceOption: ValueType<OptionTypeBase> | null\n}\n\nclass SessionManager extends React.Component<{}, ManagerState> {\n  state: ManagerState = { source: 'mine', started: false, sourceOption: options[0], plan: simplePlan }\n  onSourceChange = (selectedSourceOption: ValueType<OptionTypeBase>) => {\n    if (selectedSourceOption) {\n      this.setState({\n        // @ts-ignore\n        source: selectedSourceOption.value,\n        sourceOption: selectedSourceOption\n      })\n    }\n  }\n\n  get sourceUri(): string {\n    let { source } = this.state;\n    if (source === 'random') {\n      return Sources.search('human');\n    } else if (source === 'mine' || source === 'tia' || source === 'moi') {\n      let src = Sources.collection(Collections[source])\n      return src;\n    } else {\n      return Sources.search(source);\n    }\n  }\n\n  get classDuration(): number {\n    return this.state.plan.map(plan => plan.duration * plan.times).reduce((d, d2) => d + d2) / 60\n  }\n\n  render() {\n    if (!this.state.started) {\n      \n      return <div className=\"Manager\">\n        <h1>FIGURE</h1>\n        <p>Let's find a source of inspiration for you today!</p>\n        <Select \n          value={this.state.sourceOption}\n          onChange={this.onSourceChange}\n          options={options}\n          theme={theme => ({ \n            ...theme,\n            borderRadius: 5,\n            colors: {\n              ...theme.colors,\n              neutral0: 'black',\n              neutral50: 'white',\n              neutral60: 'white',\n              neutral70: 'white',\n              neutral80: 'white',\n              neutral90: 'white',\n              primary: 'white',\n              primary25: '#3a3a3a',\n            }\n          })}\n        />\n        <br/> <br/>\n        <hr style={{width:'68%'}}/>\n        <br/>\n        <p>\n          We will prepare a {this.classDuration}-minute class with the collection <b>\"{this.state.source}\"</b>.\n        </p>\n        <p>\n          <b>Remember to have fun.</b>\n        </p>\n        <br/>\n        <button \n          onClick={() => this.setState({ started: true })}\n          >\n          Let's go!\n          </button>\n      </div>\n    } else {\n      return <Session\n          source={this.sourceUri}\n          plan={simplePlan}\n        />\n      }\n  }\n}\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <main className=\"App-content\">\n        <SessionManager />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}